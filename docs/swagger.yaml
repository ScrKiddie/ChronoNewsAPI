definitions:
  model.CategoryCreate:
    properties:
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    type: object
  model.CategoryResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.CategoryUpdate:
    properties:
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    type: object
  model.Pagination:
    properties:
      page:
        type: integer
      size:
        type: integer
      totalItem:
        type: integer
      totalPage:
        type: integer
    type: object
  model.PostResponse:
    properties:
      categoryID:
        type: integer
      content:
        type: string
      id:
        type: integer
      lastUpdated:
        type: integer
      publishedDate:
        type: integer
      summary:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      userID:
        type: integer
    type: object
  model.PostResponseWithPreload:
    properties:
      category:
        $ref: '#/definitions/model.CategoryResponse'
      content:
        type: string
      id:
        type: integer
      lastUpdated:
        type: integer
      publishedDate:
        type: integer
      summary:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.UserLogin:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
      tokenCaptcha:
        minLength: 100
        type: string
    required:
    - email
    - password
    - tokenCaptcha
    type: object
  model.UserRegister:
    properties:
      email:
        maxLength: 255
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
      phoneNumber:
        maxLength: 20
        type: string
    required:
    - email
    - name
    - password
    - phoneNumber
    type: object
  model.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phoneNumber:
        type: string
      profilePicture:
        type: string
      role:
        type: string
    type: object
  model.UserUpdatePassword:
    properties:
      confirmPassword:
        type: string
      oldPassword:
        maxLength: 255
        minLength: 8
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
    required:
    - confirmPassword
    - oldPassword
    - password
    type: object
  utility.PaginationResponse:
    properties:
      data: {}
      pagination: {}
    type: object
  utility.ResponseError:
    properties:
      error:
        type: string
    type: object
  utility.ResponseSuccess:
    properties:
      data: {}
    type: object
info:
  contact: {}
paths:
  /api/category:
    get:
      description: Retrieve a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.CategoryResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: List all categories
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Create a new category with the provided details
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.CategoryCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Create a new category
      tags:
      - Category
  /api/category/{id}:
    delete:
      description: Delete a specific category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utility.ResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Delete a category
      tags:
      - Category
    get:
      description: Retrieve details of a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Get category by ID
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Update the details of a specific category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.CategoryUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Update a category
      tags:
      - Category
  /api/post:
    get:
      description: Search posts with various filtering options
      parameters:
      - default: 0
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Page size
        in: query
        name: size
        type: integer
      - default: 0
        description: User ID
        in: query
        name: userID
        type: integer
      - description: Title search query
        in: query
        name: title
        type: string
      - description: User name search query
        in: query
        name: userName
        type: string
      - description: Summary search query
        in: query
        name: summary
        type: string
      - description: Category name search query
        in: query
        name: categoryName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.PaginationResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.PostResponseWithPreload'
                  type: array
                pagination:
                  items:
                    $ref: '#/definitions/model.Pagination'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Search posts
      tags:
      - Post
    post:
      consumes:
      - multipart/form-data
      description: Create a new post with the given details
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post Title
        in: formData
        name: title
        required: true
        type: string
      - description: Post Summary
        in: formData
        name: summary
        required: true
        type: string
      - description: Post Content
        in: formData
        name: content
        required: true
        type: string
      - description: User ID
        in: formData
        name: userID
        type: integer
      - description: Category ID
        in: formData
        name: categoryID
        required: true
        type: integer
      - description: Post Thumbnail
        in: formData
        name: thumbnail
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.PostResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Create a new post
      tags:
      - Post
  /api/post/{id}:
    delete:
      description: Delete a post by its ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utility.ResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Delete a post
      tags:
      - Post
    get:
      description: Retrieve a specific post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.PostResponseWithPreload'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Get a post by ID
      tags:
      - Post
    put:
      consumes:
      - multipart/form-data
      description: Update an existing post's details
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post Title
        in: formData
        name: title
        required: true
        type: string
      - description: Post Summary
        in: formData
        name: summary
        required: true
        type: string
      - description: Post Content
        in: formData
        name: content
        required: true
        type: string
      - description: User ID
        in: formData
        name: userID
        type: integer
      - description: Category ID
        in: formData
        name: categoryID
        required: true
        type: integer
      - description: Post Thumbnail
        in: formData
        name: thumbnail
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.PostResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Update an existing post
      tags:
      - Post
  /api/user:
    get:
      description: Search for users by name, role, phone number, and email
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Name
        in: query
        name: name
        type: string
      - description: Phone number
        in: query
        name: phoneNumber
        type: string
      - description: Email
        in: query
        name: email
        type: string
      - description: Role
        in: query
        name: role
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.PaginationResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.UserResponse'
                  type: array
                pagination:
                  items:
                    $ref: '#/definitions/model.Pagination'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Search for users
      tags:
      - User
    post:
      consumes:
      - multipart/form-data
      description: Create a new user with name, phone number, email, and role
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User name
        in: formData
        name: name
        required: true
        type: string
      - description: Phone number
        in: formData
        name: phoneNumber
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Profile picture
        in: formData
        name: profilePicture
        type: file
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Role (admin, journalist)
        in: formData
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Create a new user
      tags:
      - User
  /api/user/{id}:
    delete:
      description: Delete an existing user by their ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utility.ResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Delete user by ID
      tags:
      - User
    get:
      description: Retrieve a specific user by their ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - multipart/form-data
      description: Update an existing user's details
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User name
        in: formData
        name: name
        required: true
        type: string
      - description: Phone number
        in: formData
        name: phoneNumber
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Profile picture
        in: formData
        name: profilePicture
        type: file
      - description: Password
        in: formData
        name: password
        type: string
      - description: Role
        in: formData
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Update user by ID
      tags:
      - User
  /api/user/current:
    get:
      description: Get the profile of the currently logged-in user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Get current user's profile
      tags:
      - User
  /api/user/current/password:
    patch:
      consumes:
      - application/json
      description: Update the current user's password
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: New password details
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdatePassword'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utility.ResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Update current user's password
      tags:
      - User
  /api/user/current/profile:
    patch:
      consumes:
      - multipart/form-data
      description: Update the current user's name, phone number, email, and profile
        picture
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User name
        in: formData
        name: name
        required: true
        type: string
      - description: Phone number
        in: formData
        name: phoneNumber
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Profile picture
        in: formData
        name: profilePicture
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.ResponseSuccess'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Update current user's profile
      tags:
      - User
  /api/user/login:
    post:
      consumes:
      - application/json
      description: User logs in with email/phone number and password, returning a
        JWT token
      parameters:
      - description: User login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utility.ResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: User login
      tags:
      - User
  /api/user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with name, phone number, email, and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utility.ResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utility.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ResponseError'
      summary: Register a new user
      tags:
      - User
swagger: "2.0"
